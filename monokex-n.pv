(* Proverif 2.02p1 *)
(* Monokex, "N" pattern, warmup *)
(* active attacker by default *)
(* $ proverif -color monokex-n.pv | egrep "RES|ok" *)
(*
    ================================
    TODO: this list should be empty:
    o) if T1 = zT1 then set event (!)
    o)    ^^^^^^^ find the way to do it
    o)    ^^^^^^^ done event
*)

set traceDisplay = long.

(* Public channel *)
free c: channel.

(* Constants *)
const MonokexN: bitstring.
const zero    : bitstring.

fun mac(bitstring, bitstring) : bitstring.

(* Diffie-Hellman *)
type private.
type public.
const g: public.
fun exp(public, private): public.
equation forall x: private, y: private;
   exp(exp(g, x), y) = exp(exp(g, y), x).
fun pub2bs(public): bitstring [data, typeConverter].

(* Symmetric encryption: (plain, key) *)
fun enc(bitstring, bitstring): bitstring.
reduc forall a: bitstring, b: bitstring;
   dec(enc(a, b), b) = a.

(* Split *)
fun first(bitstring): bitstring.
fun second(bitstring): bitstring.
reduc forall x: bitstring;
   unsplit(first(x), second(x)) = x.

(* Secrecy query *)
free text1: bitstring [private].
free text2: bitstring [private].
query attacker(text1).
query attacker(text2).

(* Secrecy assumptions *)
(* not attacker(new R). *)
(* not attacker(new E). *)

(* Events and authentication queries *)
(* event ping(private, public). *)
(* event pong(private, public). *)
(* event done. *)
(* query a: private, b: public; *)
   (* inj-event(pong(a, b)) ==> *)
   (* inj-event(ping(a, b)). *)
(* query event(done). *)

let Initiator(RS: public) =
   new E: private;
   new p1: bitstring;

   let IE = exp(g, E) in
   let H0 = MonokexN in
   let H1 = mac(H0, pub2bs(RS)) in
   let H2 = mac(H1, H1) in
   let H3 = mac(H2, pub2bs(IE)) in
   let H4 = mac(H3, pub2bs(exp(RS, E))) in
   let Z1 = enc(zero, H4) in
   let H5 = first(Z1) in
   let K1 = second(Z1) in
   let S1 = enc(p1, K1) in
   let Z2 = mac(H5, S1) in
   let H6 = first(Z2) in
   let T1 = second(Z2) in
   (* event ping(E, RS); *)
   out(c, (IE, S1, T1));

   (* Ready, use it *)
   out(c, enc(text1, H6))
.

let Responder(R: private, RS: public) =
   in(c, (IE: public, S1: bitstring, zT1: bitstring));
   (* event pong(R, IE); *)
   let H0 = MonokexN in
   let H1 = mac(H0, pub2bs(RS)) in
   let H2 = mac(H1, H1) in
   let H3 = mac(H2, pub2bs(IE)) in
   let H4 = mac(H3, pub2bs(exp(IE, R))) in
   let Z1 = enc(zero, H4) in
   let H5 = first(Z1) in
   let K1 = second(Z1) in
   let Z2 = mac(H5, S1) in
   let H6 = first(Z2) in
   let T1 = second(Z2) in
   if  T1 = zT1 then

   (* Ready, use it *)
   out(c, enc(text2, H6))
.

process
   new R: private;

   let RS = exp(g, R) in
   out(c, RS);
   !Initiator(RS) | !Responder(R, RS)
